【参考CSDN】
https://blog.csdn.net/weixin_45921929/article/details/128673338?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171625044316800182135349%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171625044316800182135349&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-5-128673338-null-null.142^v100^pc_search_result_base4&utm_term=yolov8&spm=1018.2226.3001.4187

【快捷复制】
1. 单卡训练：
yolo task=detect mode=train model=yolov8n.pt data=data/seg.yaml batch=32 epochs=100 imgsz=640 workers=16 device=0

2. 模型验证：
yolo task=detect mode=val model=runs/detect/train3/weights/best.pt data=data/seg.yaml device=0 plots=True

3. 模型预测：
yolo task=detect mode=predict model=runs/detect/train3/weights/best.pt source=data/images device=0

4. 模型导出：
yolo task=detect mode=export model=runs/detect/train3/weights/best.pt format=onnx



【详    解】
1. 安装所需环境，首先进入yolov8文件夹：pip install -r requirements.txt
   还需要安装cuda、pytorch可能

2. 新建data文件夹，包含images、json、split、txt四个文件夹，其中images用于存放所有图片，json是利用labelme工具打标签存放的所有json文件，其余两个为空文件夹（没清空建议清空）

3. 修改json2txt.py里面46和47行的路径，48行根据实际标签进行修改，运行此py文件，可将json文件转换成txt

4. 修改split.py里面84-86行的路径，分别是所有图片的路径、txt文件路径和用于保存训练集、测试集和验证集的split文件夹路径，运行此py文件，可在data文件夹里的split文件夹，找到相关内容

5. 修改data文件夹里面的seg.yaml文件，前三行的路径分别对应split文件夹里面的路径，而"names"里根据实际标签情况进行修改

6. 下面开始模型训练、验证、预测和导出：

【单卡训练】
打开终端，进入相应环境，进入yolov8文件夹，在终端中输入下面命令，即可开始训练：

yolo task=detect mode=train model=yolov8n.pt data=data/seg.yaml batch=32 epochs=100 imgsz=640 workers=16 device=0

训练结束之后，在runs/detect/train/weights文件夹里面，可以找到best.pt权重文件


【多卡训练】目前不常用
yolov8的多卡训练其实很简单，不需要使用繁琐的命令行指令，仅需把device='0,1,2,3’即可，注意一定要加\和引号哦：

yolo task=detect mode=train model=yolov8n.pt data=data/seg.yaml batch=32 epochs=100 imgsz=640 workers=16 device=\'0,1,2,3\'


<参数详解>

 名    称		         描               述							默认值
model		训练模型权重，可指定具体位置，如yolov8n.pt，yolov8n.yaml等		null
data		数据路径，使用自定义的yaml文件或者官方yaml				null
batch		训练的批量大小							16
epochs		训练的轮次							100
imgsz		输入图像压缩后的尺寸						640
workers		多线程数据加载，默认8						8
device		用于训练的设备，可选0或1或cpu等(0或1代表GPU)			null

box		giou损失的系数
cls		分类损失的系数
dfl		dfl损失的系数
nbs		名义批次,比如实际批次为16,那么64/16=4,每4次迭代，才进行一次反向传播更新权重，可以节约显存


【模型验证】
使用如下命令，即可完成对验证数据的评估：

yolo task=detect mode=val model=runs/detect/train/weights/best.pt data=data/seg.yaml device=0 plots=True


<参数详解>

 名    称		         描         述		默认值
val		在训练期间验证/测试	True
max_det		每张图像的最大检测数	300
half		使用半精度 (FP16)	True
plots		在训练期间显示图片	False


【模型预测】
使用如下命令，即可完成对新数据的预测，source需要指定为自己的图像路径，或者摄像头（0）：

yolo task=detect mode=predict model=runs/detect/train/weights/best.pt source=data/images device=0

需要修改model的路径，找到训练完毕best文件所在的路径，上面有写
执行完之后，在runs/detect/predict里面可以看到预测结果


<参数详解>

 名    称			         描         述					默认值
source			图片或视频的源目录	
save			是否保存结果					False
show			是否显示结果					False
save_txt		将结果保存为 .txt 文件				False
save_conf		保存带有置信度分数的结果				False
save_crop		保存裁剪后的图像和结果				Fasle
hide_labels		隐藏标签						False
line_thickness		边界框厚度（像素）				3
classes			只显示某几类结果，如class=0, 或者 class=[0,2,3]	null


【模型导出】
使用如下命令，即可完成训练模型的导出：
yolo task=detect mode=export model=runs/detect/train/weights/best.pt format=onnx




